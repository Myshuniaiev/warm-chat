{"ast":null,"code":"import { setUserData } from \"./auth-reducer\"; // TYPE FOR MESSAGES\n\nconst INITIALIZED_SUCCESS = \"INITIALIZED_SUCCESS\"; // INITIAL STATE\n\nlet initialState = {\n  // INITIALIZED\n  initialized: false\n}; // THIS REDUCER TAKES IN THE STATE AND THE ACTION CALLED\n\nconst appReducer = (state = initialState, action) => {\n  switch (action.type) {\n    //   FOLLOW\n    case INITIALIZED_SUCCESS:\n      {\n        return { ...state,\n          initialized: true\n        };\n      }\n\n    default:\n      return state;\n  }\n}; // FOLLOW ACTION CREATOR\n\n\nexport const initializedSuccess = () => ({\n  type: INITIALIZED_SUCCESS\n}); // SET NEW DATA\n\nexport const initializeApp = () => dispatch => {\n  let promise = dispatch(setUserData());\n  Promise.all([promise]).then(() => {\n    dispatch(initializedSuccess());\n  });\n};\nexport default appReducer;","map":{"version":3,"sources":["C:/Users/Marina/Desktop/warm-chat/src/redux/myReducers/app-reducer.js"],"names":["setUserData","INITIALIZED_SUCCESS","initialState","initialized","appReducer","state","action","type","initializedSuccess","initializeApp","dispatch","promise","Promise","all","then"],"mappings":"AAAA,SAASA,WAAT,QAA4B,gBAA5B,C,CAEA;;AACA,MAAMC,mBAAmB,GAAG,qBAA5B,C,CAEA;;AACA,IAAIC,YAAY,GAAG;AACjB;AACAC,EAAAA,WAAW,EAAE;AAFI,CAAnB,C,CAKA;;AACA,MAAMC,UAAU,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AACnD,UAAQA,MAAM,CAACC,IAAf;AACE;AACA,SAAKN,mBAAL;AAA0B;AACxB,eAAO,EACL,GAAGI,KADE;AAELF,UAAAA,WAAW,EAAE;AAFR,SAAP;AAID;;AACD;AACE,aAAOE,KAAP;AATJ;AAWD,CAZD,C,CAcA;;;AACA,OAAO,MAAMG,kBAAkB,GAAG,OAAO;AACvCD,EAAAA,IAAI,EAAEN;AADiC,CAAP,CAA3B,C,CAIP;;AACA,OAAO,MAAMQ,aAAa,GAAG,MAAOC,QAAD,IAAc;AAC/C,MAAIC,OAAO,GAAGD,QAAQ,CAACV,WAAW,EAAZ,CAAtB;AACAY,EAAAA,OAAO,CAACC,GAAR,CAAY,CAACF,OAAD,CAAZ,EAAuBG,IAAvB,CAA4B,MAAM;AAChCJ,IAAAA,QAAQ,CAACF,kBAAkB,EAAnB,CAAR;AACD,GAFD;AAGD,CALM;AAOP,eAAeJ,UAAf","sourcesContent":["import { setUserData } from \"./auth-reducer\";\r\n\r\n// TYPE FOR MESSAGES\r\nconst INITIALIZED_SUCCESS = \"INITIALIZED_SUCCESS\";\r\n\r\n// INITIAL STATE\r\nlet initialState = {\r\n  // INITIALIZED\r\n  initialized: false,\r\n};\r\n\r\n// THIS REDUCER TAKES IN THE STATE AND THE ACTION CALLED\r\nconst appReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    //   FOLLOW\r\n    case INITIALIZED_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        initialized: true,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// FOLLOW ACTION CREATOR\r\nexport const initializedSuccess = () => ({\r\n  type: INITIALIZED_SUCCESS,\r\n});\r\n\r\n// SET NEW DATA\r\nexport const initializeApp = () => (dispatch) => {\r\n  let promise = dispatch(setUserData());\r\n  Promise.all([promise]).then(() => {\r\n    dispatch(initializedSuccess());\r\n  });\r\n};\r\n\r\nexport default appReducer;\r\n"]},"metadata":{},"sourceType":"module"}