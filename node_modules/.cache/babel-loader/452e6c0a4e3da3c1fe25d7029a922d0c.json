{"ast":null,"code":"import { authAPI } from \"../../api/api\"; // TYPE FOR MESSAGES\n\nconst SET_USER_DATA = \"SET-USER-DATA\"; // INITIAL STATE\n\nlet initialState = {\n  // USER IG\n  userId: null,\n  // EMAIL\n  email: null,\n  // LOGIN\n  login: null,\n  // AUTH CHECKOUT\n  isAuth: false\n}; // THIS REDUCER TAKES IN THE STATE AND THE ACTION CALLED\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    //   FOLLOW\n    case SET_USER_DATA:\n      {\n        return { ...state,\n          ...action.payload\n        };\n      }\n\n    default:\n      return state;\n  }\n}; // FOLLOW ACTION CREATOR\n\n\nexport const setUserData = (userId, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    userId,\n    email,\n    login,\n    isAuth\n  }\n}); // SET NEW DATA\n\nexport const myDataThunkCreator = () => dispatch => {\n  authAPI.authMe().then(response => {\n    if (response.data.resultCode === 0) {\n      let {\n        id,\n        login,\n        email\n      } = response.data.data;\n      dispatch(setUserData(id, email, login, true));\n    }\n  });\n}; // LOGIN\n\nexport const loginThunkCreator = (email, password, rememberMe) => dispatch => {\n  authAPI.login(email, password, rememberMe).then(data => {\n    if (data.resultCode === 0) {\n      dispatch(myDataThunkCreator());\n    }\n  });\n}; // LOGOUT\n\nexport const logoutThunkCreator = () => dispatch => {\n  authAPI.logout().then(data => {\n    if (data.resultCode === 0) {\n      dispatch(setUserData(null, null, null, false));\n    }\n  });\n};\nexport default authReducer; // 123\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    userId,\n    email,\n    login,\n    isAuth\n  }\n});\nexport const getAuthUserData = () => dispatch => {\n  authAPI.me().then(response => {\n    if (response.data.resultCode === 0) {\n      let {\n        id,\n        login,\n        email\n      } = response.data.data;\n      dispatch(setAuthUserData(id, email, login, true));\n    }\n  });\n};\nexport const login = (email, password, rememberMe) => dispatch => {\n  authAPI.login(email, password, rememberMe).then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(getAuthUserData());\n    }\n  });\n};","map":{"version":3,"sources":["C:/Users/Marina/Desktop/warm-chat/src/redux/myRedusers/auth-reduser.js"],"names":["authAPI","SET_USER_DATA","initialState","userId","email","login","isAuth","authReducer","state","action","type","payload","setUserData","myDataThunkCreator","dispatch","authMe","then","response","data","resultCode","id","loginThunkCreator","password","rememberMe","logoutThunkCreator","logout","setAuthUserData","getAuthUserData","me"],"mappings":"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","sourcesContent":["import { authAPI } from \"../../api/api\";\r\n\r\n// TYPE FOR MESSAGES\r\nconst SET_USER_DATA = \"SET-USER-DATA\";\r\n\r\n// INITIAL STATE\r\nlet initialState = {\r\n  // USER IG\r\n  userId: null,\r\n  // EMAIL\r\n  email: null,\r\n  // LOGIN\r\n  login: null,\r\n  // AUTH CHECKOUT\r\n  isAuth: false,\r\n};\r\n\r\n// THIS REDUCER TAKES IN THE STATE AND THE ACTION CALLED\r\nconst authReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    //   FOLLOW\r\n    case SET_USER_DATA: {\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// FOLLOW ACTION CREATOR\r\nexport const setUserData = (userId, email, login, isAuth) => ({\r\n  type: SET_USER_DATA,\r\n  payload: { userId, email, login, isAuth },\r\n});\r\n\r\n// SET NEW DATA\r\nexport const myDataThunkCreator = () => (dispatch) => {\r\n  authAPI.authMe().then((response) => {\r\n    if (response.data.resultCode === 0) {\r\n      let { id, login, email } = response.data.data;\r\n      dispatch(setUserData(id, email, login, true));\r\n    }\r\n  });\r\n};\r\n\r\n// LOGIN\r\nexport const loginThunkCreator = (email, password, rememberMe) => (\r\n  dispatch\r\n) => {\r\n  authAPI.login(email, password, rememberMe).then((data) => {\r\n    if (data.resultCode === 0) {\r\n      dispatch(myDataThunkCreator());\r\n    }\r\n  });\r\n};\r\n\r\n// LOGOUT\r\nexport const logoutThunkCreator = () => (dispatch) => {\r\n  authAPI.logout().then((data) => {\r\n    if (data.resultCode === 0) {\r\n      dispatch(setUserData(null, null, null, false));\r\n    }\r\n  });\r\n};\r\n\r\nexport default authReducer;\r\n\r\n// 123\r\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\r\n  type: SET_USER_DATA,\r\n  payload: { userId, email, login, isAuth },\r\n});\r\n\r\nexport const getAuthUserData = () => (dispatch) => {\r\n  authAPI.me().then((response) => {\r\n    if (response.data.resultCode === 0) {\r\n      let { id, login, email } = response.data.data;\r\n      dispatch(setAuthUserData(id, email, login, true));\r\n    }\r\n  });\r\n};\r\n\r\nexport const login = (email, password, rememberMe) => (dispatch) => {\r\n  authAPI.login(email, password, rememberMe).then((response) => {\r\n    if (response.data.resultCode === 0) {\r\n      dispatch(getAuthUserData());\r\n    }\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}